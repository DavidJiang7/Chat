<link rel="stylesheet" href="~/Content/CSS/userChat.css" />
<link rel="stylesheet" href="~/Content/CSS/iconfont.css" />
@*<link rel="stylesheet" href="~/Content/bootstrap.min.css" />*@

<div id="CustomerService">
    <div class="chatgroup">
        <ul class="chatgroupUl">
            <!--  <li class="chatgroupLi">
                  <img src="images/11.jpg"/>
                  <span>老冯啊</span>
              </li>-->
        </ul>
    </div>
    <div id="chat" class="ui-widget-content">
        <div class="operation">
            <p class="titleImg"><img id="UserImg" src="" /><i id="UserName"></i></p>
        </div>
        <div class="chatMain">
            <ul class="chatMainContentUl"></ul>
            <div class="chatMainSendContent">
                <i class="icon"></i>
                <textarea class="chatMainSendInput"></textarea>
                <button class="sendMegBtn">发送</button>
            </div>
        </div>
    </div>
</div>
<button class="btn btn-primary btn-lg" data-toggle="modal" data-target="#myModal">
    登录
</button>
<div class="modal fade" id="myModal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content" style="width:400px;height:400px;margin:200px auto;">
            <!--下面是用户名输入框-->
            <div class="input-group" style="margin-top: 110px;">
                <span class="input-group-addon icon iconfont icon-user"></span>
                <input id="userName" type="text" class="form-control" placeholder="用户名" aria-describedby="basic-addon1">
            </div>
            <br>
            <!--下面是密码输入框-->
            <div class="input-group">
                <span class="input-group-addon icon iconfont icon-mima"></span>
                <input id="passWord" type="password" class="form-control" placeholder="密码" aria-describedby="basic-addon1">
            </div>
            <br>
            <!--下面是登陆按钮,包括颜色控制-->
            <div class="input-group">
                <button type="button" style="width:280px;" class="signIn btn btn-danger">登 录</button>
            </div>
        </div>
    </div>
</div>
<div id="refresh">
    <div class="refresh">
        <div class="refreshContent">
            <p>页面刷新完成后，将会重新加载数据，是否刷新？</p>
            <button class="refreshBtn sure" onclick="sureRender()" style="margin-right: 50px;">
                确定
            </button>
            <button class="refreshBtn nosure" onclick="nosureRender()">取消</button>
        </div>
    </div>
</div>
<script src="~/Content/JS/jquery-3.1.1.min.js"></script>
<script src="~/Content/JS/jquery-ui.js"></script>
<script src="~/Content/JS/bootstrap.min.js"></script>
<script>
    var sendMegBtn = $('.sendMegBtn');
    //用户输入内容框
    var chatMainSendInput = $('.chatMainSendInput');

    //enter发送信息
    $(document).keyup(function (e) {
        if (e.keyCode == 13 && chatMainSendInput.val() !== "" && chatMainSendInput.val() !== "\n" && chatMainSendInput.val() !== "\r\n") {
            SendMessage();
        }
    })

    var common = {
        //个位数补零
        Appendzero: function (obj) {
            if (obj < 10) return "0" + obj; else return obj;
        },
        //滚动条始终底部
        scrollBottom: function (obj) {
            obj.scrollTop(obj[0].scrollHeight);
        },
        UnixToDate: function (unixTime, isFull, timeZone) {
            if (typeof (timeZone) == 'number') {
                unixTime = parseInt(unixTime) + parseInt(timeZone) * 60 * 60;
            }
            var time = new Date(unixTime * 1000);
            var ymdhis = "";
            ymdhis += time.getFullYear() + "-";
            ymdhis += common.Appendzero((time.getMonth() + 1)) + "-";
            ymdhis += common.Appendzero(time.getDate()) + "&nbsp;&nbsp;";
            if (isFull == true) {
                ymdhis += common.Appendzero(time.getHours()) + ":";
                ymdhis += common.Appendzero(time.getMinutes()) + ":";
                ymdhis += common.Appendzero(time.getSeconds());
            }
            return ymdhis;
        },
        Connected:function (meaasge) {
            var div = '<li class="protMessage">' + meaasge + '</li>';
            $('.chatMainContentUl').append(div);
        },
        userRender: function (username, headimg, date, message) {
            //用户对话框
            var userchat =
                '<li class="chatMainContentLi chatMainContentLiRight">' +
                '<img src="' + headimg + '"/>' +
                '<div class="chatMainContentLiTime chatMainContentLiTimeRight">' +
                '<ul><li><p>' + date + '</p></li>' +
                '<li><p>' + username + '</p></li>' +
                '</ul>' +
                '<div class="chatMainContentLiLear chatMainContentLiRight">' +
                '<span class="chatMainContentLiChat chatMainContentLiChatRight">' + message + '</span>' +
                '<div class="triangle-up triangle-upRight"></div>' +
                '</div></div>' +
                '</li>';
            $('.chatMainContentUl').append(userchat);
            common.scrollBottom($('.chatMainContentUl'));
        },
        userRender2: function (username, headimg) {
            //        当前时间
            var myDate = new Date();
            var year = myDate.getFullYear();
            var month = myDate.getMonth() + 1;
            var day = myDate.getDate();
            var hour = myDate.getHours();
            var minute = myDate.getMinutes();
            var second = myDate.getSeconds();

            //用户对话框
            var userchat2 =
                '<li class="chatMainContentLi chatMainContentLiRight">' +
                '<img src="' + headimg + '"/>' +
                '<div class="chatMainContentLiTime chatMainContentLiTimeRight">' +
                '<ul><li><p>' + year + '-' + common.Appendzero(month) + '-' + common.Appendzero(day) + '&nbsp;&nbsp;' + common.Appendzero(hour) + ':' + common.Appendzero(minute) + ':' + common.Appendzero(second) + '</p></li>' +
                '<li><p>' + username + '</p></li></ul>' +
                '<div class="chatMainContentLiLear chatMainContentLiRight">' +
                '<span class="chatMainContentLiChat chatMainContentLiChatRight">' + chatMainSendInput.val() + '</span>' +
                '<div class="triangle-up triangle-upRight"></div>' +
                '</div></div>' +
                '</li>';
            $('.chatMainContentUl').append(userchat2);
            common.scrollBottom($('.chatMainContentUl'));
            //调用函数添加最新消息到数组
            var newMess = { MESS_Id: 0, MESS_UserId: UserUserId, MESS_ServiceId: ServiceUserId, MESS_Status: 1, MESS_TypeId: 1, MESS_CreateTime: common.getNowTime(), MESS_Content: chatMainSendInput.val(), MESS_Author: 2 };
            common.unshiftMess(UserUserId, newMess);
            //            清空消息
            chatMainSendInput.val("");
        },
        servRender: function (username, headimg, date, reaultFinaly) {
            //用户对话框
            var servchat =
                '<li class="chatMainContentLi chatMainContentLiLeft">' +
                '<img class="headimg" src="' + headimg + '"/>' +
                '<div class="chatMainContentLiTime chatMainContentLiTimeLeft">' +
                '<ul><li><p class="name">' + username + '</p></li>' +
                '<li><p>' + date + '</p></li>' +
                '</ul>' +
                '<div class="chatMainContentLiLear chatMainContentLiLeft">' +
                '<span class="chatMainContentLiChat chatMainContentLiChatLeft">' + reaultFinaly + '</span>' +
                '<div class="triangle-up triangle-upLeft"></div>' +
                '</div></div>' +
                '</li>';
            $('.chatMainContentUl').append(servchat);
            common.scrollBottom($('.chatMainContentUl'));
        },
        servRender2: function (userId, username, message) {
            if (userId == UserUserId) {
                //当前时间
                var myDate = new Date();
                var year = myDate.getFullYear();
                var month = myDate.getMonth() + 1;
                var day = myDate.getDate();
                var hour = myDate.getHours();
                var minute = myDate.getMinutes();
                var second = myDate.getSeconds();
                //用户对话框
                var servchat2 =
                    '<li class="chatMainContentLi chatMainContentLiLeft">' +
                    '<img src="' + UserImg + '"/>' +
                    '<div class="chatMainContentLiTime chatMainContentLiTimeLeft">' +
                    '<ul><li><p>' + username + '</p></li>' +
                    '<li><p>' + year + '-' + common.Appendzero(month) + '-' + common.Appendzero(day) + '&nbsp;&nbsp;' + common.Appendzero
                    (hour) + ':' + common.Appendzero(minute) + ':' + common.Appendzero(second) + '</p></li>' +
                    '</ul>' +
                    '<div class="chatMainContentLiLear chatMainContentLiLeft">' +
                    '<span class="chatMainContentLiChat chatMainContentLiChatLeft">' + message + '</span>' +
                    '<div class="triangle-up triangle-upLeft"></div>' +
                    '</div></div>' +
                    '</li>';
                $('.chatMainContentUl').append(servchat2);
                common.scrollBottom($('.chatMainContentUl'));
            }
            else
            {
                //高亮左边客户消息栏
                $("li[userId='" + userId + "']").addClass("addnewColor");//默认打开第一个客户的消息内容
            }
            //调用函数添加最新消息到数组
            var newMess = { MESS_Id: 0, MESS_UserId: userId, MESS_ServiceId: ServiceUserId, MESS_Status: 1, MESS_TypeId: 1, MESS_CreateTime: common.getNowTime(), MESS_Content: message, MESS_Author: 1 };
            common.unshiftMess(userId, newMess);
        },
        //添加新消息到消息数组
        unshiftMess: function (userId, messObj) {
            var userIdIndex = $.inArray(userId, UserIdArr);
            if (userIdIndex >= 0) {
                MessArr[userIdIndex].unshift(messObj);
            }
        },
        //构建标准时间戳
        getNowTime: function () {
            var now = (new Date()).getTime();
            return time = '/Date(' + now + ')/';
        }
    }
    //  F5刷新
    $(document).keydown(function (e) {
        if (e.keyCode == 116) {
            if (e && e.preventDefault) {
                //非IE
                e.preventDefault();
            } else {
                //IE
                window.event.returnValue = false;
            }
            $('#refresh').show();
        }
    })
    //  刷新确定函数
    function nosureRender() {
        $('#refresh').hide();
    }
    //  刷新取消函数
    function sureRender() {
        location.reload();
    }
</script>

@section scripts {
    <!--Script references. -->
    <!--The jQuery library is required and is referenced by default in _Layout.cshtml. -->
    <!--Reference the SignalR library. -->
    <script src="~/Scripts/jquery.signalR-2.2.0.min.js"></script>
    <!--Reference the autogenerated SignalR hub script. -->
    <script src="~/signalr/hubs"></script>
    <!--SignalR script to update the chat page and send messages.-->
    <script>
        var ServiceUserName = "";
        var ServiceUserId = 0;
        var ServiceNickName = "";
        var ServiceImg = "";
        //当前选中的客户基础信息
        var UserImg = "";
        var UserConnectionId = "";
        var UserUserName = "";
        var UserUserId = 0;
        var RowIndex = -1;
        //   登录验证
        $('.signIn').click(function () {
            var username = $('#userName').val();
            var password = $('#passWord').val();
            //        console.log(username +'---'+password)
            $.ajax({
                type: 'post',
                url: '/service/loginapi',
                dataType: 'json',
                data: { username: username, password: password },
                success: function (data) {
                    if (data.Code == 0) {
                        //                 console.log(data.Data.UserName)
                        $('.btn').hide();
                        $('.fade').css({ opacity: 0, display: 'none' });
                        $('#chat').show();
                        ServiceUserName = data.Data.UserName;
                        ServiceUserId = data.Data.UserId;
                        ServiceNickName = data.Data.NickName;
                        ServiceImg = data.Data.Img;
                        $("#UserImg").attr('src', data.Data.Img);
                        $("#UserName").text(data.Data.UserName);
                        // Start the connection.
                        $.connection.hub.start().done(function () {
                            //客户链接signalr服务器，参数依次是客服id、客服用户名、客服头像
                            //当登录状态链接失败时，后台会调用loginWarm
                            chat.server.sConnect(data.Data.UserId, data.Data.UserName, data.Data.Img, data.Data.ServiceMax);
                            $('.sendMegBtn').click(SendMessage);//绑定发送信息函数
                            GetCurrentMess();//获取最近聊天记录
                        });
                    }
                    else {
                        alert(data.Message);
                    }
                }
            });
            //var li = $("li[rowindex=0]");//默认打开第一个客户的消息内容
            //li.click();
        });
        //当前已经连接进来的所有客户信息
        var UserIdArr = [];
        var MessArr = [];
        //获取最近聊天记录
        function GetCurrentMess() {
            $.ajax({
                type: 'get',
                url: '/service/GetCurrentMess',
                dataType: 'json',
                //data: { UserId: 1 },
                success: function (data) {
                    if (data.Code != 0) {
                        alert(data.Message);
                        return;
                    }
                    if (data.Data == null || data.Data.length == 0) {
                        return;
                    }
                    $.each(data.Data, function (i) {
                        var Li = '<li connectionId="" class="chatgroupLi"  userId="' + data.Data[i].UserId + '" rowindex="' + i + '">' +
                            '<img class="headimg" src="' + data.Data[i].Img + '"/>' +
                            '<span class="name">' + data.Data[i].UserName + '</span>' +
                            '</li>';
                        $('.chatgroupUl').append(Li);

                        var UserId = data.Data[i].UserId;
                        UserIdArr.push(UserId);
                        var mess = data.Data[i].Mess;
                        MessArr.push(mess);
                    })
                    $('.chatgroupLi').css({ filter: 'grayscale(1)' });//默认掉线

                }
            });
            $('body').on('click', '.chatgroupLi', function () {

                $('.chatMainContentUl').text("");
                $(this).removeClass("addnewColor");
                $(this).addClass('newcolor');
                $(this).siblings().removeClass('newcolor')
                $(this).find('span').css({ color: '#000' });
                $(this).siblings().find('span').css({ color: '#fff' });
                UserUserId = parseInt($(this).attr('userId'));
                RowIndex = $(this).attr('rowindex');
                UserUserName = $(this).find('.name').text();
                UserImg = $(this).find('.headimg').attr('src');
                UserConnectionId = $(this).attr('connectionId');
                var messAutor = [];
                var messTime = '';
                var reault = [];
                var newIndex = [];

                for (var j = 0; j < MessArr[RowIndex].length; j++) {
                    if (j == 0) {
                        messTime = (MessArr[RowIndex][j].MESS_CreateTime).substr(6, 10);
                    } else {
                        messTime += '-' + (MessArr[RowIndex][j].MESS_CreateTime).substr(6, 10);
                    }
                    reault.unshift(MessArr[RowIndex][j].MESS_Content);
                    messAutor.unshift(MessArr[RowIndex][j].MESS_Author);

                }
                var dateArr = new Array();
                dateArr = messTime.split('-').sort(sortNumber);
                for (var m = 0; m < reault.length; m++) {
                    var reaultFinaly = reault[m];
                    date = common.UnixToDate((dateArr[m]), true);
                    //console.log(date)
                    if (messAutor[m] == 2) {
                        common.userRender(ServiceUserName, ServiceImg, date, reaultFinaly);
                    } else if (messAutor[m] == 1) {
                        common.servRender(UserUserName, UserImg, date, reaultFinaly);
                    }
                }
                function sortNumber(a, b) {
                    return a - b
                }
                common.scrollBottom($('.chatMainContentUl'));
            })
        }
        //掉线处理
        function loseService() {
            ServiceUserName = "";
            ServiceUserId = 0;
            ServiceNickName = "";
            ServiceImg = "";
            UserImg = "";
            UserConnectionId = "";
            UserUserName = "";
            UserUserId = 0;
            RowIndex = -1;
            //$('#refresh').show();//刷新提示
        }
        // Reference the auto-generated proxy for the hub.
        var chat = $.connection.chatHub;
        // Create a function that the hub can call back to display messages.
        chat.client.addNewMessageToPage = common.servRender2;
        chat.client.loginWarm = function () {
            alert(ServiceUserName + "，您的登录状态已失效！请重新登录！");
            //跳转到登录页面代码
        };
        chat.client.onUserDisconnected = function (username) {
            //掉线提示
            alert("警告！" + ServiceUserName + "，您的账户已经在其他地方登录！");
            loseService();
            location.reload();
            //window.close();
            //弹出登录窗口
        };
        chat.client.addNewClientTagToPage = function (userconnectionid, userId, username, img) {
            //这里需要注意：一个客服，同一时间段可以接受多个客户咨询，至于最多几个看客服的属性字段
            //例如在消息框中间显示某些提示文字信息，如“客户***需要咨询，近期可能会联系你”
            //UserConnectionId 为客户链接id， 需要保存在页面中，下次发送信息时带上此参数
            //userName 客户名称，需要保存在页面中，下次发送信息时带上此参数
            //UserConnectionId = userconnectionid;
            //UserUserName = username;
            //UserImg = img;

            //alert("客户" + username + " 已经接入，近期会咨询您！");
            var userIdIndex = $.inArray(userId, UserIdArr);
            if (userIdIndex == -1) {
                UserIdArr.push(userId);
                var mess = [];
                MessArr.push(mess);
                var r = MessArr.length - 1;
                var Li = '<li connectionId="' + userconnectionid + '" class="chatgroupLi addnewColor" userId="' + userId + '"  rowindex="' + r + '">' +
                            '<img class="headimg" src="' + img + '"/>' +
                            '<span class="name">' + username + '</span>' +
                            '</li>';
                $('.chatgroupUl').append(Li);
            }
            else {
                //var li = $('.chatgroupUl').find('.chatgroupLi').attr("userId", UserIdArr[userIdIndex]);
                var li = $("li[userId='" + UserIdArr[userIdIndex] + "']");
                li.attr("connectionId", userconnectionid);
                li.css({ filter: 'none' });
                if (UserIdArr[userIdIndex] != UserUserId) {
                    li.addClass("addnewColor");
                }
            }
        };
        //客服发送信息时发现客户掉线的主动处理
        chat.client.loseUserWarm = function () {
            //提示客服该用户已经掉线
            //alert("抱歉！客户 " + UserUserName + " 可能由于网络原因已经下线！");
            common.Connected("抱歉！对方已下线！");

            var li = $("li[userId='" + UserUserId + "']");
            li.attr("connectionId", '');
            li.css({ filter: 'grayscale(1)' });//掉线处理
            UserImg = "";
            UserConnectionId = "";
            UserUserName = "";
            UserUserId = 0;
            RowIndex = -1;
        };
        //客户掉线被动处理
        chat.client.userLogout = function (userconnectionid) {
            var li = $("li[connectionId='" + userconnectionid + "']");
            li.attr("connectionId", '');
            li.removeClass("addnewColor");//掉线处理
            li.css({ filter: 'grayscale(1)' });//掉线处理
        }
        function SendMessage() {
            // Call the Send method on the hub.
            if (UserConnectionId != "" && ServiceUserName != "" && $.trim(chatMainSendInput.val()) != "") {
                chat.server.sSend(UserConnectionId, ServiceUserName, chatMainSendInput.val());
                common.userRender2(ServiceUserName, ServiceImg);
                chatMainSendInput.val('').focus();
            }
            else
            {
                common.Connected("抱歉！对方已下线！");
            }
            common.scrollBottom($('.chatMainContentUl'));
        }
    </script>
}